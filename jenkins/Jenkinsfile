pipeline {
    agent none
    options {
        preserveStashes(buildCount: 5)
    }
    environment{
        VCS_CREDENTIALS_ID = "github.jpl.nasa.gov_devops_pw"
        ARTIFACTORY_CREDENTIALS_ID = "jenkins.cae.artifactory"
        ARTIFACTORY_CRED = credentials("jenkins.cae.artifactory")
        ARTIFACTORY_URL = "https://cae-artifactory.jpl.nasa.gov/artifactory"
        ARTIFACTORY_URL_DEV = "https://cae-artifactory.jpl.nasa.gov/artifactory/general-develop/gov/nasa/podaac/cumulus"
        ARTIFACTORY_URL_REL = "https://cae-artifactory.jpl.nasa.gov/artifactory/general/gov/nasa/podaac/cumulus"
        ARTIFACTORY_DOCKER_REGISTRY = "cae-artifactory.jpl.nasa.gov:16003"
        ECC_NEXUS_CREDENTIALS_ID = "earthdata.nexus"
        ECC_NEXUS_HOST = "maven.earthdata.nasa.gov"

        PROJECT_NAME = "cumulus"
        ARTIFACTORY_DOCKER_DEVELOP = "cae-artifactory.jpl.nasa.gov:16001"
        ARTIFACTORY_DOCKER_STAGE   = "cae-artifactory.jpl.nasa.gov:16002"
        ARTIFACTORY_DOCKER_RELEASE = "cae-artifactory.jpl.nasa.gov:16003"
        ARTIFACTORY_DOCKER_GROUP = "podaac/cumulus"
    }
    stages{
        stage("Checkout"){
            agent {
                dockerfile {
                    filename 'build.Dockerfile'
                    dir 'jenkins'
                    label 'devops1'
                }
            }
            environment {
                GIT_COMMIT_SHORT = sh(script: "printf \$(git rev-parse --short ${GIT_COMMIT})", returnStdout: true).trim()
            }
            steps{
                checkout([
                    $class: 'GitSCM',
                    branches: scm.branches,
                    extensions: scm.extensions + [
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'LocalBranch', localBranch: '**'],
                        [$class: 'PruneStaleBranch']
                    ],
                    userRemoteConfigs: scm.userRemoteConfigs
                ])
                script{
                    the_service = sh(returnStdout: true, script: "poetry version | awk '{print \$1}'").trim()
                    the_version = sh(returnStdout: true, script: "poetry version | awk '{print \$2}'").trim()
                    the_env = sh(returnStdout: true, script: "printenv").trim()
                }
                writeYaml file: 'build-info.yaml', data: ['service_name': the_service, 'source_service_version': the_version, 'build_environment': the_env, 'git_commit_short':GIT_COMMIT_SHORT ], overwrite: true
                stash name: 'build-info', includes: 'build-info.yaml'
                echo "Checked out $the_service $the_version"
            }
        }
        stage("Skip Build"){
            when {
                anyOf{
                    changelog '^/version.*'
                    changelog '^/jenkins skip'
                }
            }
            agent {
                dockerfile {
                    filename 'build.Dockerfile'
                    dir 'jenkins'
                    label 'devops1'
                }
            }
            steps{
                script {
                    currentBuild.result = 'NOT_BUILT'
                }
                echo "Build Skipped."
            }
        }
        stage("Run Build"){
            when {
                not{
                    anyOf{
                        changelog '^/version.*'
                        changelog '^/jenkins skip'
                    }
                }
            }
            agent {
                dockerfile {
                    filename 'build.Dockerfile'
                    dir 'jenkins'
                    label 'devops1'
                    args '-v /home/cm/.aws:/home/dockeruser/.aws:ro'
                }
            }
            stages{
                stage("Version"){
                    stages {
                        stage("Pre Alpha"){
                            when {
                                anyOf{
                                    branch 'feature/*'
                                    changeRequest target: 'develop'
                                }
                            }
                            environment {
                                 GIT_COMMIT_SHORT = sh(script: "printf \$(git rev-parse --short ${GIT_COMMIT})", returnStdout: true).trim()
                            }
                            steps{
                                unstash name: 'build-info'
                                sh "poetry version \$(poetry version | awk \'{print \$2 \"+${GIT_COMMIT_SHORT}\"}\')"
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    the_version = sh(returnStdout: true, script: "poetry version | awk '{print \$2}'").trim()
                                    build_info.build_service_version = the_version
                                    build_info.artifactory_base_path = "general-develop/gov/nasa/podaac"
                                    build_info.artifactory_docker_registry = "cae-artifactory.jpl.nasa.gov:16001"
                                }
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'
                            }
                        }
                        stage("Alpha"){
                            when {
                                branch 'develop'
                            }
                            steps{
                                unstash name: 'build-info'
                                sh "poetry version prerelease"
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    the_version = sh(returnStdout: true, script: "poetry version | awk '{print \$2}'").trim()
                                    build_info.build_service_version = the_version
                                    build_info.artifactory_base_path = "general-stage/gov/nasa/podaac"
                                    build_info.artifactory_docker_registry = "cae-artifactory.jpl.nasa.gov:16002"
                                }
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'
                            }
                        }
                        stage("Minor"){
                            when {
                                allOf{
                                    branch 'release/*'
                                    not{
                                        changeRequest()
                                    }
                                }
                            }
                            steps{
                                dir("temp"){
                                    withCredentials([usernamePassword(credentialsId: env.VCS_CREDENTIALS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                                        checkout([
                                            $class: 'GitSCM',
                                            branches: [[name: 'develop']],
                                            extensions: [
                                                [$class: 'LocalBranch', localBranch: '**']
                                            ],
                                            userRemoteConfigs: scm.userRemoteConfigs
                                        ])

                                        sh('''
                                            poetry version minor
                                            poetry version preminor
                                        ''')
                                        script{
                                            dev_version = sh(returnStdout: true, script: "poetry version | awk '{print \$2}'").trim()
                                        }
                                        sh("""
                                            git config --local user.name "podaac-cloud-IandA"
                                            git config --local user.email podaac-cloud-IandA@jpl.nasa.gov
                                            git config --local credential.helper "!f() { echo username=\$GIT_USERNAME; echo password=\$GIT_PASSWORD; }; f"
                                            git commit -am '/version ${dev_version}'
                                            git push origin HEAD:develop
                                        """)
                                    }
                                    deleteDir()
                                }
                            }
                        }
                        stage("Release Candidate"){
                            when {
                                changeRequest target: 'master'
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    cur_ver = build_info['source_service_version']
                                    if(cur_ver.contains("rc")){
                                        sh "poetry version prerelease"
                                    }else{
                                        sh "poetry version ${env.CHANGE_BRANCH.split('/')[-1]}-rc.1"
                                    }
                                    the_version = sh(returnStdout: true, script: "poetry version | awk '{print \$2}'").trim()
                                    build_info.build_service_version = the_version
                                    build_info.artifactory_base_path = "general-stage/gov/nasa/podaac"
                                    build_info.artifactory_docker_registry = "cae-artifactory.jpl.nasa.gov:16002"
                                }
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'
                            }
                        }
                        stage("Release"){
                            when {
                                branch 'master'
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    the_version = build_info['source_service_version'].split('-')[0]
                                    build_info.build_service_version = the_version
                                    build_info.artifactory_base_path = "general/gov/nasa/podaac"
                                    build_info.artifactory_docker_registry = "cae-artifactory.jpl.nasa.gov:16003"
                                }
                                sh "poetry version $the_version"
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'
                            }
                        }
                    }
                }
                stage("Install"){
                    // Need to install the project before running tests against it.
                    steps{
                        sh 'poetry install'
                    }
                }
                stage("Test"){
                    stages {
                        stage("Validate"){
                            steps{
                                sh 'poetry install;poetry run pytest'
                            }
                        }
                    }
                }
                stage("Build Software"){
                    steps{
                        dir('dist'){
                            deleteDir()
                        }
                        unstash name: 'build-info'
                        script{
                            build_info = readYaml file: 'build-info.yaml'
                            the_service = build_info['service_name']
                        }
                                           
                        echo 'Building the lambda zip file'
                        sh "pwd;mkdir venv;mkdir -p build/lambda;mkdir -p build/dist"
                        sh "poetry config virtualenvs.path venv"
                        sh "poetry install --no-dev"
                        sh "cp ./cumulus_nc_converter/*.py venv/*/lib/*/site-packages/"
                        sh "chmod -R 775 venv/*/lib/*/site-packages/"

                        sh "cp -R venv/*/lib/*/site-packages/* build/lambda"
                        sh "cp -R terraform/* build/dist"
                        dir('build'){
                            sh"pwd;ls -la"
                            sh "cd lambda;zip -r ../${the_service}_lambda.zip .;cd ..;pwd;ls -la;cp ${the_service}_lambda.zip dist"
                            sh "cd dist; zip -r ../${the_service}.zip ."
                        }
                        sh "cd ..;ls -la"
                    }
                    post {
                        success {
                            archiveArtifacts artifacts: 'build/*.zip'
                            stash name: 'artifacts', includes: 'build/*.zip'
                        }
                    }
                }
                stage("Publish"){
                    when {
                        beforeAgent true
                        anyOf{
                            branch 'develop'
                            branch 'master'
                            changeRequest()
                            changelog '/jenkins deploy-dev'
                            changelog '/jenkins deploy-sandbox'
                        }
                    }
                    stages{
                        stage("Tag Version"){
                            when {
                                anyOf{
                                    branch 'develop'
                                    branch 'master'
                                    changeRequest target: 'master'
                                }
                            }
                            environment{
                                THE_BRANCH = "${(env.CHANGE_BRANCH?:env.BRANCH_NAME)}"
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                }
                                withCredentials([usernamePassword(credentialsId: env.VCS_CREDENTIALS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                                    sh("""
                                        git config --local user.name "podaac-cloud-IandA"
                                        git config --local user.email podaac-cloud-IandA@jpl.nasa.gov
                                        git config --local credential.helper "!f() { echo username=\$GIT_USERNAME; echo password=\$GIT_PASSWORD; }; f"
                                        git commit -am '/version ${build_info.build_service_version}'
                                    """)
                                    script{
                                        if(env.BRANCH_NAME == 'master'){
                                            sh "git tag -a ${build_info.build_service_version} -m 'Release of v${build_info.build_service_version}'"
                                        }else{
                                            sh "git tag ${build_info.build_service_version}"
                                        }
                                    }
                                    sh("""
                                        git push origin HEAD:${env.THE_BRANCH}
                                        git push origin ${build_info.build_service_version}
                                    """)
                                }
                            }
                            post {
                                failure {
                                    // If the push fails, delete the local tag so when the build reruns it won't fail because the tag already exists
                                    sh "git tag -d ${build_info.build_service_version}"
                                }
                            }
                        }
                        stage("Upload to Artifactory"){
                             parallel {
                                stage("UPLOAD_DEV_SPACE"){
                                    when{
                                        anyOf{
                                            branch 'develop'
                                            changeRequest()
                                            changelog '/jenkins deploy-dev'
                                            changelog '/jenkins deploy-sandbox'
                                        }
                                    }
                                    steps{
                                        unstash name: 'build-info'
                                        unstash name: 'artifacts'
                                        script{
                                            build_info = readYaml file: 'build-info.yaml'
                                            the_version = build_info['build_service_version']
                                            the_service = build_info['service_name']
                                        }
                                        echo "Publish ${the_service}-${the_version} to DEV space artifactory directory"
                                        withCredentials([usernamePassword(credentialsId: env.ARTIFACTORY_CREDENTIALS_ID, usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]){
                                            sh "ls -la"
                                            sh "pwd; ls -la; curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD} -X PUT ${ARTIFACTORY_URL_DEV}/${the_service}/${the_version}/${the_service}-${the_version}.zip -T build/${the_service}.zip"
                                            sh "echo == Upload to CAE Artifactory Succeeded =="
                                        }
                                    }
                                }
                                stage("UPLOAD_REL_SPACE"){
                                    when{
                                         anyOf{
                                            branch 'master'
                                        }
                                    }
                                    steps{
                                        unstash name: 'build-info'
                                        unstash name: 'artifacts'
                                        script{
                                            build_info = readYaml file: 'build-info.yaml'
                                            the_version = build_info['build_service_version']
                                            the_service = build_info['service_name']
                                        }
                                        echo "Publish ${the_version}-${the_version} to REL space artifactory directory"
                                        withCredentials([usernamePassword(credentialsId: env.ARTIFACTORY_CREDENTIALS_ID, usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]){
                                            sh "ls -la"
                                            sh "pwd; ls -la; curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD} -X PUT ${ARTIFACTORY_URL_REL}/${the_service}/${the_version}/${the_service}-${the_version}.zip -T build/${the_service}.zip"
                                            sh "echo = Upload to CAE Artifactory Succeeded =="
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage("Build docker images and upload to CAE Artifactory & AWS ECR"){
            when {
                beforeAgent true
                allOf{
                    not{
                        anyOf {
                            changelog '^/version.*'
                            changelog '^/jenkins skip'
                        }
                    }
                    anyOf{
                        branch 'develop'
                        changeRequest()
                        branch 'master'
                        changelog '/jenkins deploy-dev'
                        changelog '/jenkins deploy-sit'
                        changelog '/jenkins deploy-uat'
                        changelog '/jenkins deploy-sandbox'
                    }
                }
            }
            agent {
                label 'devops1'
            }
            stages{
                stage("Build Image"){
                    steps{
                        unstash name: 'build-info'
                        script{
                            build_info = readYaml file: 'build-info.yaml'
                            git_commit_short = build_info.git_commit_short
                            println("Git commit short hash as temp image tag: ${git_commit_short}")
                            sh(returnStdout: false, script: "cp build/cumulus-nc-converter_lambda.zip docker")
                            sh(returnStdout: false, script: "cd docker;docker build --rm -t ${git_commit_short} -f ./ECS.Dockerfile .")
                            println("Docker with git_commit_short tag has been built successfully")
                        }
                    }
                    post {
                        success {
                            // Empty the stash. Best workaround for Jenkins since there is no delete stash
                            stash name: "artifacts", excludes: "**", allowEmpty: true
                        }
                        failure {
                            // Empty the stash. Best workaround for Jenkins since there is no delete stash
                            stash name: "artifacts", excludes: "**", allowEmpty: true
                        }
                    }
                }
                stage("SANDBOX"){
                    when{
                      allOf{
                          anyOf {
                            changelog '/jenkins deploy-sandbox'
                          }
                          not{
                            anyOf {
                                changelog '/jenkins deploy-dev'
                                changelog '/jenkins deploy-sit'
                                changelog '/jenkins deploy-uat'
                            }
                          }
                      }
                    }
                    stages{
                        stage("Push to SNDBOX ECR"){
                            agent {
                                node("devops1")
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    venue = "sndbx"
                                    println("Starting ${venue} image build and push")
                                    build_info = readYaml file: 'build-info.yaml'

                                    tagAndPushDockerImage(venue, build_info)
                                }
                                withCredentials([usernamePassword(credentialsId: env.ARTIFACTORY_CREDENTIALS_ID, usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]){
                                    sh("""
                                        docker login --username "${ARTIFACTORY_USER}" --password "${ARTIFACTORY_PASSWORD}" "${ARTIFACTORY_DOCKER_REGISTRY}"
                                        docker push "${artifactory_image_tag}"
                                    """)
                                }
                            }
                            post {
                                always {
                                    script {
                                        cleanup(artifactory_image_tag, ecr_intermediate_image_tag, git_commit_short)
                                    }
                                }
                            }
                        }
                    }
                }
                stage("DEV/SIT"){
                    when{
                      allOf{
                          anyOf {
                            changeRequest target: 'develop'
                            changelog '/jenkins deploy-dev'
                            branch 'develop'
                            changelog '/jenkins deploy-sit'
                          }
                          not{
                            anyOf {
                                changelog '/jenkins deploy-uat'
                            }
                          }
                      }
                    }
                    environment {
                        tva_tf_venue = 'ngap-service-sit'
                        cumulus_swot_sit_tf_venue = 'ngap-cumulus-swot-sit'
                        cumulus_sit_tf_venue = 'ngap-cumulus-sit'
                    }
                    stages{
                        stage("Push to DEV/SIT ECR"){
                            agent {
                                node("devops1")
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    venue = "sit"
                                    println("Starting ${venue} image build and push")
                                    build_info = readYaml file: 'build-info.yaml'
                                    tagAndPushDockerImage(venue, build_info)
                                }
                                withCredentials([usernamePassword(credentialsId: env.ARTIFACTORY_CREDENTIALS_ID, usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]){
                                    sh("""
                                        docker login --username "${ARTIFACTORY_USER}" --password "${ARTIFACTORY_PASSWORD}" "${ARTIFACTORY_DOCKER_REGISTRY}"
                                        docker push "${artifactory_image_tag}"
                                    """)
                                }
                            }
                            post {
                                always {
                                    script {
                                        cleanup(artifactory_image_tag, ecr_intermediate_image_tag, git_commit_short)
                                    }
                                }
                            }
                        }
                    }
                }
                stage("UAT"){
                    when {
                        changeRequest target: 'master'
                    }
                    environment {
                      tva_tf_venue = 'ngap-service-uat'
                      cumulus_uat_tf_venue = 'ngap-cumulus-uat'
                      cumulus_swot_uat_tf_venue = 'ngap-cumulus-swot-uat'
                    }
                    stages{
                        stage("Push to UAT ECR"){
                            agent {
                                node("devops1")
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    venue = "uat"
                                    println("Starting ${venue} image build and push")
                                    build_info = readYaml file: 'build-info.yaml'
                                    tagAndPushDockerImage(venue, build_info)
                                }
                                withCredentials([usernamePassword(credentialsId: env.ARTIFACTORY_CREDENTIALS_ID, usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]){
                                    sh("""
                                        docker login --username "${ARTIFACTORY_USER}" --password "${ARTIFACTORY_PASSWORD}" "${ARTIFACTORY_DOCKER_REGISTRY}"
                                        docker push "${artifactory_image_tag}"
                                    """)
                                }
                            }
                            post {
                                always {
                                    script {
                                        cleanup(artifactory_image_tag, ecr_intermediate_image_tag, git_commit_short)
                                    }
                                }
                            }
                        }
                    }
                }
                stage("OPS"){
                    when {
                        branch 'master'
                    }
                     environment {
                        tva_tf_venue = 'ngap-service-ops'
                        cumulus_ops_tf_venue = 'ngap-cumulus-uat'
                    }
                    stages{
                        stage("Push to OPS ECR"){
                            agent {
                                node("devops1")
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    venue = "ops"
                                    println("Starting ${venue} image build and push")
                                    build_info = readYaml file: 'build-info.yaml'
                                    tagAndPushDockerImage(venue, build_info)
                                }
                                withCredentials([usernamePassword(credentialsId: env.ARTIFACTORY_CREDENTIALS_ID, usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]){
                                    sh("""
                                        docker login --username "${ARTIFACTORY_USER}" --password "${ARTIFACTORY_PASSWORD}" "${ARTIFACTORY_DOCKER_REGISTRY}"
                                        docker push "${artifactory_image_tag}"
                                    """)
                                }
                            }
                            post {
                                always {
                                    script {
                                        cleanup(artifactory_image_tag, ecr_intermediate_image_tag, git_commit_short)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

def tagAndPushDockerImage(String venu, build_info) {
    println("venu : ${venu}")
    the_service = build_info['service_name']
    the_version = build_info['build_service_version']
    the_version = the_version.replaceAll("\\+","_")
    git_commit_short = build_info['git_commit_short']
    artifactory_image_tag = "${ARTIFACTORY_DOCKER_DEVELOP}/${ARTIFACTORY_DOCKER_GROUP}/${the_service}:${the_version}"
    println("${venue} artifactory image tag: ${artifactory_image_tag}")

    ecr_intermediate_image_tag = "${ARTIFACTORY_DOCKER_GROUP}/${the_service}:${the_version}"
    println("${venue} ecr intermediate image tag: ${ecr_intermediate_image_tag}")
    sh(returnStdout: false, script: "docker tag ${git_commit_short} ${artifactory_image_tag}")
    sh(returnStdout: false, script: "docker tag ${git_commit_short} ${ecr_intermediate_image_tag}")
    ecr_tag = sh(returnStdout: true, script: "./docker/push-docker-ecr.sh -v ${venue} -t ${ecr_intermediate_image_tag}")
    println("${venue} ECR tag: ${ecr_tag}")
}

def cleanup(artifactory_image_tag, ecr_intermediate_image_tag, git_commit_short) {
    println("Removing artifactory_image_tag: ${artifactory_image_tag}")
    println("Removing ecr_intermediate_image_tag: ${ecr_intermediate_image_tag}")
    println("Removing git_commit_short image: ${git_commit_short}")
    sh(returnStdout: false, script: "docker rmi ${artifactory_image_tag}")
    sh(returnStdout: false, script: "docker rmi ${ecr_intermediate_image_tag}")
    sh(returnStdout: false, script: "docker rmi ${git_commit_short}")
}